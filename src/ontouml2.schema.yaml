$schema: http://json-schema.org/draft-07/schema#
$id: https://w3id.org/ontouml/schema/v1.0.0
title: OntoUML Schema
description: The OntoUML Schema defines the JSON serializations of OntoUML ontologies and their contents according to the OntoUML Metamodel project.
oneOf:
  - $ref: '#/definitions/OntoumlElement'
definitions:
  OntoumlElement:
    $id: '#OntoumlElement'
    title: OntoUML Element
    description: An identified element of an OntoUML ontology according to the OntoUML Metamodel, which includes projects, model elements, diagrams, views, and shapes.
    allOf:
      - type: object
        properties:
          id:
            type: string
          created:
            type: string
          modified:
            type: string
      - oneOf:
          - $ref: '#/definitions/NamedElement'
          - $ref: '#/definitions/Shape'
          - $ref: '#/definitions/View'
  NamedElement:
    $id: '#NamedElement'
    title: Named Element
    description: An OntoUML element that can be attributed a name and other descriptive information.
    allOf:
      - type: object
        properties:
          name:
            type: string
          alternativeNames:
            type: string
          description:
            type: string
          editorialNotes:
            type: string
          creators:
            type: string
          contributors:
            type: string
      - oneOf:
          - $ref: '#/definitions/Project'
          - $ref: '#/definitions/ModelElement'
  Project:
    $id: '#Project'
    title: Project
    description: A named element that serves as the container of an entire OntoUML ontology, including the elements of both the abstract syntax (i.e., model elements) and the concrete syntax (i.e., diagrams, view, and shapes).
    type: object
    properties:
      type:
        const: Project
      elements:
        type: string
      root:
        type: string
      publisher:
        type: string
      designedForTasks:
        type: string
      license:
        type: string
      accessRights:
        type: string
      themes:
        type: string
      contexts:
        type: string
      ontologyTypes:
        type: string
      representationStyle:
        type: string
      namespace:
        type: string
      landingPages:
        type: string
      sources:
        type: string
      bibliographicCitations:
        type: string
      keywords:
        type: string
      acronyms:
        type: string
      languages:
        type: string
  ModelElement:
    $id: '#ModelElement'
    title: Model Element
    description: A named element that represents an element of the language's abstract syntax (e.g., a class, a relation, or a generalization).
    allOf:
      - type: object
        properties:
          customProperties:
            type: string
      - oneOf:
          - $ref: '#/definitions/Generalization'
          - $ref: '#/definitions/GeneralizationSet'
          - $ref: '#/definitions/Link'
          - $ref: '#/definitions/Literal'
          - $ref: '#/definitions/Note'
          - $ref: '#/definitions/Package'
          - $ref: '#/definitions/DecoratableElement'
  Generalization:
    $id: '#Generalization'
    title: Generalization
    description: |-
      A model element that represents the generalization of a specific classifier into a general classifier. When read in the inverse direction, a generalization is referred to as a specialization.

      Examples include the generalization of a specific class "Student" into a general class "Person," and the generalization of a specific relation "close friends with" into a general relation "friends with".

      A generalization can only connect two classifiers of the same type, i.e., it can either connect two class elements or two relation elements.
    type: object
    properties:
      type:
        const: Generalization
      general:
        type: string
      specific:
        type: string
  GeneralizationSet:
    $id: '#GeneralizationSet'
    title: Generalization Set
    description: |-
      A model element that represents a group of connected generalization elements. A generalization set can define disjoint and/or complete constraints over the generalizations it groups.

      Examples include the incomplete (i.e., non-complete) and overlapping (i.e., non-disjoint) generalization set of "Person" into "Student" and "Teacher", and the disjoint and complete generalization set of "Person" into "Child" and "Adult".

      All generalizations in the generalization set must share a common general classifier.
    type: object
    properties:
      type:
        const: GeneralizationSet
      isDisjoint:
        type: string
      isComplete:
        type: string
      generalizations:
        type: string
      categorizer:
        description: |-
          TODO: update

          A generalization set involving classes can also have a categorizer, which is a class with an order greater than one which all specific classes in the set instantiate. For example, "Academic Role" as the categorizer of the generalization set of "Person" into "Student" and "Teacher" representing the specific classes as instances of the categorizer.
        type: string
  Link:
    $id: '#Link'
    title: Link
    description: A model element that connects a note to a model element it concerns.
    type: object
    properties:
      type:
        const: Link
      note:
        type: string
      element:
        type: string
  Literal:
    $id: '#Literal'
    title: Literal
    description: A model element that represents a specific value within an enumerated set of values. Examples include each letter in an A to F letter grading scale, listed in a class \"Letter Grade\" decorated with the stereotype \"enumeration\".
    type: object
    properties:
      type:
        const: Literal
  Note:
    $id: '#Note'
    title: Note
    description: A model element that contains an annotation about the ontology or some of its elements. A note can also be used to represent a constraint in both natural or structured language (i.e., first-order logic, or OCL).
    type: object
    properties:
      type:
        const: Note
      text:
        type: string
  Package:
    $id: '#Package'
    title: Package
    description: |-
      A model element that groups other model elements referred to as "packageable elements." Package elements are used to perform the modularization of an ontology.

      While the OntoUML Metamodel does not require package elements to follow a tree structure (i.e., it allows overlapping packages), ontologies that require UML representations should adhere to this constraint for compatibility.
    type: object
    properties:
      type:
        const: Package
      contents:
        type: string
  DecoratableElement:
    $id: '#DecoratableElement'
    title: Decoratable Element
    description: |-
      A model element that can be decorated with a stereotype to identify its ontological properties according to UFO.

      Examples include a class decorated with the stereotype "kind" identifying it as a type of objects that provides an identity principle to its instances.
    allOf:
      - type: object
        properties:
          stereotype:
            type: string
          isDerived:
            type: string
      - oneOf:
          - $ref: '#/definitions/Property'
          - $ref: '#/definitions/Classifier'
  Property:
    $id: '#Property'
    title: Property
    description: |-
      A decoratable element that represents an attribute of a class, or one end of a relation.

      Examples include the attribute "name" of the class "Person", and the ends of the binary relation "studies in" connected to the classes "Student" and "University."

      Instances of class and relation elements bear values for the properties these classifiers contain, according to the constraints specified within each property. For example, the value assigned to a property in an instance must be itself an instance of the classifier in property type.
    type: object
    properties:
      type:
        const: Property
      subsettedProperties:
        type: string
      redefinedProperties:
        type: string
      aggregationKind:
        type: string
      cardinality:
        type: string
      isOrdered:
        type: string
      isReadOnly:
        type: string
      propertyType:
        type: string
  Classifier:
    $id: '#Classifier'
    title: Classifier
    description: A decoratable element (either a class or a relation) that defines properties exhibited by its instances.
    allOf:
      - type: object
        properties:
          isAbstract:
            type: string
          properties:
            type: string
      - oneOf:
          - $ref: '#/definitions/Class'
          - $ref: '#/definitions/Relation'
  Class:
    $id: '#Class'
    title: Class
    description: |-
      A classifier that defines the properties of a set of "individualized" entities (i.e., non-relational) of the subject domain.

      Examples include "Person", "Enrollment", and "Grade".

      The instances of a class may include entities such as objects (e.g., people, organizations, vehicles), reified properties (e.g., leafs' colors, agents' intentions, enrollments), and bare values (e.g., a number or a literal).
    type: object
    properties:
      type:
        const: Class
      literals:
        type: string
      restrictedTo:
        type: string
      isPowertype:
        type: string
      order:
        type: string
  Relation:
    $id: '#Relation'
    title: Relation
    description: |-
      A classifier that defines the properties of a set of relations of the subject domain.

      Examples include "studies in", "buys product from" (ternary relation), and derivation relations (e.g., between material relations and relators).
    type: object
    oneOf:
      - $ref: '#/definitions/BinaryRelation'
      - $ref: '#/definitions/NaryRelation'
  BinaryRelation:
    $id: '#BinaryRelation'
    title: Binary Relation
    description: |-
      A relation that defines the properties of a set of binary relations of the subject domain.

      Examples include "studies in", and derivation relations (e.g., between material relations and relators).

      A binary relation may either connect two classes, or a relation (as source) and a class (as class) in the case of derivation relations connecting descriptive relations to the classes that serve as their truthmakers (as in the relation between the material relation "studies in" and the "Enrollment" relator).
    type: object
    properties:
      type:
        const: BinaryRelation
  NaryRelation:
    $id: '#NaryRelation'
    title: N-ary Relation
    description: |-
      A relation that defines the properties of a set of relations of the subject domain that connect more than two members.

      Examples include "studies in", "buys product from" (ternary relation), and derivation relations (e.g., between material relations and relators).
    type: object
    properties:
      type:
        const: NaryRelation
  Diagram:
    $id: '#Diagram'
    title: Diagram
    description: A named element that contains the visual representation (i.e., the concrete syntax) of an OntoUML model or of a portion of it.
    type: object
    properties:
      type:
        const: Diagram
      owner:
        type: string
      views:
        type: string
  View:
    $id: '#View'
    title: View
    description: |-
      An OntoUML element that represents a single model element in a diagram.

      A view element connects a model element to the shapes in a diagram necessary to represent a single occurrence of it. For example, an n-ary relation view connects a single relation element to one diamond and a set of paths that represent a single occurrence of it in a diagram. Multiple views can represent multiple occurrences of an element in the same diagram.

      A view element is responsible for what portions of a model element are present in a single diagram representation (e.g., whether the cardinality of a property is shown), unlike a shape, which is responsible aspects of the actual drawing (e.g., how to render a portion of a view, in which position, and with which dimensions).
    allOf:
      - type: object
        properties:
          shape:
            type: string
          isViewOf:
            type: string
      - oneOf:
          - $ref: '#/definitions/ClassView'
          - $ref: '#/definitions/GeneralizationSetView'
          - $ref: '#/definitions/NaryRelationView'
          - $ref: '#/definitions/NoteView'
          - $ref: '#/definitions/PackageView'
          - $ref: '#/definitions/BinaryConnectorView'
  ClassView:
    $id: '#ClassView'
    title: Class View
    description: A view element that represents the single occurrence of a class in a diagram.
    type: object
    properties:
      type:
        const: ClassView
      rectangle:
        type: string
  GeneralizationSetView:
    $id: '#GeneralizationSetView'
    title: Generalization Set View
    description: A view element that represents the single occurrence of a generalization set in a diagram.
    type: object
    properties:
      type:
        const: GeneralizationSetView
      generalizations:
        type: string
      text:
        type: string
  NaryRelationView:
    $id: '#NaryRelationView'
    title: N-ary Relation View
    description: A view element that represents the single occurrence of a n-ary relation in a diagram.
    type: object
    properties:
      type:
        const: NaryRelationView
      members:
        type: string
      diamond:
        type: string
      paths:
        type: string
  NoteView:
    $id: '#NoteView'
    title: Note View
    description: A view element that represents the single occurrence of a note in a diagram.
    type: object
    properties:
      type:
        const: NoteView
      text:
        type: string
  PackageView:
    $id: '#PackageView'
    title: Package View
    description: A view element that represents the single occurrence of a package in a diagram.
    type: object
    properties:
      type:
        const: PackageView
      rectangle:
        type: string
  BinaryConnectorView:
    $id: '#BinaryConnectorView'
    title: Binary Connector View
    description: A view element that represents the single occurrence of a binary connector (e.g., a binary relation, or a generalization) in a diagram.
    allOf:
      - type: object
        properties:
          sourceView:
            type: string
          targetView:
            type: string
          path:
            type: string
      - oneOf:
          - $ref: '#/definitions/GeneralizationView'
          - $ref: '#/definitions/LinkView'
          - $ref: '#/definitions/RelationView'
  GeneralizationView:
    $id: '#GeneralizationView'
    title: Generalization View
    description: A view element that represents the single occurrence of a binary relation in a diagram.
    type: object
    properties:
      type:
        const: GeneralizationView
  LinkView:
    $id: '#LinkView'
    title: Link View
    description: A view element that represents the single occurrence of a link in a diagram.
    type: object
    properties:
      type:
        const: LinkView
  RelationView:
    $id: '#RelationView'
    title: Relation View
    description: A view element that represents the single occurrence of a binary relation in a diagram.
    type: object
    properties:
      type:
        const: RelationView
  Shape:
    $id: '#Shape'
    title: Shape
    description: An OntoUML element that identifies how to render a view (or a portion of one) in a diagram.
    oneOf:
      - $ref: '#/definitions/Path'
      - $ref: '#/definitions/RectangularShape'
  Path:
    $id: '#Path'
    title: Path
    description: A shape defined by a list of points connecting two other shapes.
    type: object
    properties:
      type:
        const: Path
      points:
        type: string
  RectangularShape:
    $id: '#RectangularShape'
    title: Rectangular Shape
    description: A shape defined by a top left position, a height, a width.
    allOf:
      - type: object
        properties:
          topLeft:
            type: string
          width:
            type: string
          height:
            type: string
      - oneOf:
          - $ref: '#/definitions/Diamond'
          - $ref: '#/definitions/Rectangle'
          - $ref: '#/definitions/Text'
  Diamond:
    $id: '#Diamond'
    title: Diamond
    description: A rectangular shape that renders the joining diamond of a n-ary relation view.
    type: object
    properties:
      type:
        const: Diamond
  Rectangle:
    $id: '#Rectangle'
    title: Rectangle
    description: A rectangular shape that renders the shape of a class view or a package view.
    type: object
    properties:
      type:
        const: Rectangle
  Text:
    $id: '#Text'
    title: Text
    description: A rectangular shape that renders the shape of a generalization set view or a note view.
    type: object
    properties:
      type:
        const: Text
  # Project:
  #   $id: '#Project'
  #   title: Project
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Project
  #     id:
  #       $ref: '#id'
  #     model:
  #       $ref: '#Package'
  #     diagrams:
  #       type: 'array'
  #       items:
  #         $ref: '#Diagram'
  #     name:
  #       $ref: '#name'
  #     alternativeName:
  #       title: alternative name
  #       description: Determines an alternative name for the resource. Accepts xsd:string and rdf:langString literals. E.g., "OntoUML/UFO Catalog"@en.
  #     description:
  #       title: description
  #       description: Determines a free-text account of the resource. Accepts xsd:string and rdf:langString literals.
  #     issued:
  #       title: issued
  #       description: Determines when the resource was created. Accepts literals of the types xsd:dateTime, xsd:date, xsd:gYearMonth, and xsd:gYear. e.g., "2018"^^xsd:gYear, "2018-01-15"^^xsd:date. When cataloging a model from documents, we recommend using the publication date from the first one.
  #     modified:
  #       title: modified
  #       description: Determines when the resource was last modified. Accepts literals of the types xsd:dateTime, xsd:date, xsd:gYearMonth, and xsd:gYear. When cataloging a model based on documents, we recommend using the publication date from the latest one.
  #     license:
  #       title: license
  #       description: Identifies a legal document under which the resource is made available. E.g., https://creativecommons.org/licenses/by/4.0/.
  #     accessRights:
  #       title: access rights
  #       description: Identifies a dct:RightsStatement or a text concerning who and how the resource can be accessed. E.g., the statement http://publications.europa.eu/resource/authority/access-right/PUBLIC informs that something is “publicly accessible by everyone”.
  #     editorialNote:
  #       title: editorial note
  #       description: Determines a general note relative to the resource documentation process. Accepts xsd:string and rdf:langString literals. E.g., "The model was originally designed in Portuguese and translated by the publisher."@en.
  #     contributor:
  #       title: contributor
  #       description: Identifies a foaf:Agent who contributed to the development of the resource.
  #     creator:
  #       title: creator
  #       description: Identifies a foaf:Agent who contributed to the creation of the resource.
  #     publisher:
  #       title: publisher
  #       description: Identifies the foaf:Agent who added the resource to the catalog. The publisher does not need to have created or contributed to the resource.
  #     landingPage:
  #       title: landing page
  #       description: Identifies a web page where one can access the dataset, its metadata, its distributions, and additional information about it. E.g., https://www.model-a-platform.com is the landing page of the Digital Platform Ontology.
  #     bibliographicCitation:
  #       title: bibliographic citation
  #       description: Determines a bibliographic reference for the dataset in textual format. Accepts xsd:string and rdf:langString literals. E.g., "Weigand, H., Johannesson, P., & Andersson, B. (2021). An artifact ontology for design science research. Data & Knowledge Engineering, 133."@en
  #     storageUrl:
  #       title: storage URL
  #       description: Determines a URL of a service in which the data and metadata of the dataset are stored. Accepts values in xsd:anyURI.
  #     distribution:
  #       title: distribution
  #       description: Identifies an available dcat:Distribution of the dataset.
  #     contactPoint:
  #       title: contact point
  #       description: Identifies a vcard:vCard that contains information on how to contact an agent responsible for the dataset. We required that at least an email is provided.
  #     keyword:
  #       title: keyword
  #       description: Determines a domain (partially) described by the semantic artefact. Accepts xsd:string and rdf:langString literals. E.g., the User Feedback Ontology is described with the keywords "online user feedback", "software engineering", and "requirements engineering".
  #     acronym:
  #       title: acronym
  #       description: Determines an acronym one can use to refer to the semantic artefact. Accepts only xsd:string literals. E.g., "RDBS-O", "COVER", "ROT".
  #     source:
  #       title: source
  #       description: Identifies resources that contain, present, or significantly influenced the development of the semantic artefact. We recommend the use of persistent and resolvable identifiers to refer to these resources, such as the Digital Object Identifier (DOI) or DBLP''s URI. E.g., https://doi.org/10.3233/AO-150150, https://dblp.org/rec/journals/ao/Morales-Ramirez15.
  #     language:
  #       title: language
  #       description: Determines a language in which the lexical labels of the semantic artefact are written. We require the use of values listed in the IANA Language Sub Tag Registry. E.g., "en", "pt".
  #     theme:
  #       title: theme
  #       description: Identifies the central theme of the semantic artefact according to a theme taxonomy. In our catalog, the theme of an artefact must be a skos:Concept from the LCC. E.g., "Class S - Agriculture", "Class T - Technology".
  #     designedForTask:
  #       title: designed for task
  #       description: |-
  #         Identifies a goal that motivated the development of the semantic artefact. To standardize the use of this property, we documented some recurrent modeling goals:
  #         - ocmv:ConceptualClarification: The artefact was created as the result of an ontological analysis of a concept, language, or domain of interest that sought to conceptually clarify and untangle complex notions and relations.
  #         - ocmv:DataPublication: The artefact was created to support the publication of some datasets. For instance, a conceptual model used to generate an OWL vocabulary to publish tabular data as linked open data on the web.
  #         - ocmv:DecisionSupportSystem: The artefact was created during the development of a decision support system.
  #         - ocmv:Example: The artefact was created to demonstrate how OntoUML can be used to solve a certain modeling challenge, to support an experiment involving OntoUML, or to exemplify how a generic model can be reused in more concrete scenarios.
  #         - ocmv:InformationRetrieval: The artefact was created to support the design of an information retrieval system.
  #         - ocmv:Interoperability: The artefact was created to support data integration, vocabulary alignment, or the interoperability of software systems.
  #         - ocmv:LanguageEngineering: The artefact was created for the design of a domain-specific modeling language.
  #         - ocmv:Learning: The artefact was created so that its authors could learn UFO and OntoUML. This usually applies to models developed by students as part of their course assignments.
  #         - ocmv:SoftwareEngineering: The artefact was created during the development of an information system. For instance, a conceptual model used to generate a relational database.
  #     context:
  #       title: context
  #       description: |-
  #         Identifies an ocmv:Context in which the artefact was developed, namely:
  #         - ocmv:Research: The artefact was developed as part of a research project. This usually implies that the artefact was featured in a scientific publication.
  #         - ocmv:Industry: The artefact was developed for a public or private organization.
  #         - ocmv:Classroom: The artefact was developed within the context of a course on conceptual modeling, most likely as a course assignment.
  #     representationStyle:
  #       title: representation style
  #       description: |-
  #         Identifies an ocmv:OntologyRepresentationStyle representation styles adopted in the artefact. We account for the existence of two values:
  #         - ocmv:OntoumlStyle: Characterizes a model that contains at least one class, relation, or property using a valid OntoUML stereotype.
  #         - ocmv:UfoStyle: Characterizes a model that contains at least one class or relation from UFO without an OntoUML stereotype.
  #     ontologyType:
  #       title: ontology type
  #       description: |-
  #         Identifies the categorization of the ontology according to its scope. For this catalog, we adopt the following three categories proposed by Roussey et al. [42]:
  #         - ocmv:Core: An ontology that grasps the central concepts and relations of a given do- main, possibly integrating several domain ontologies and being applicable in multiple scenarios. E.g., UFO-S, a commitment-based ontology of services, can be considered a core ontology because it applies to services in multiple domains, such as medical, financial, and legal services.
  #         - ocmv:Domain: An ontology that describes how a community conceptualizes a phenomenon of interest. In general, a domain ontology formally characterizes a much narrower domain than a core ontology does. E.g., OntoBio is a domain ontology of biodiversity.
  #         - ocmv:Application: An ontology that specializes a domain ontology where there could be no consensus or knowledge sharing. It represents the particular model of a domain according to a single viewpoint of a user or a developer.
  # Class:
  #   $id: '#Class'
  #   title: Class
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Class
  # Generalization:
  #   $id: '#Generalization'
  #   title: Generalization
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Generalization
  # GeneralizationSet:
  #   $id: '#GeneralizationSet'
  #   title: 'Generalization Set'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: GeneralizationSet
  # Literal:
  #   $id: '#Literal'
  #   title: Literal
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Literal
  # Package:
  #   $id: '#Package'
  #   title: Package
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Package
  # Property:
  #   $id: '#Property'
  #   title: Property
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Property
  # Relation:
  #   $id: '#Relation'
  #   title: Relation
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Relation
  # Note:
  #   $id: '#Note'
  #   title: Note
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Note
  # Diagram:
  #   $id: '#Diagram'
  #   title: Diagram
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: Diagram
  # ClassView:
  #   $id: '#ClassView'
  #   title: 'Class View'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: ClassView
  # GeneralizationSetView:
  #   $id: '#GeneralizationSetView'
  #   title: 'Generalization Set View'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: GeneralizationSetView
  # GeneralizationView:
  #   $id: '#GeneralizationView'
  #   title: 'Generalization View'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: GeneralizationView
  # NoteView:
  #   $id: '#NoteView'
  #   title: 'Note View'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: NoteView
  # PackageView:
  #   $id: '#PackageView'
  #   title: 'Package View'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: PackageView
  # RelationView:
  #   $id: '#RelationView'
  #   title: 'Relation View'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: RelationView
  # PathShape:
  #   $id: '#PathShape'
  #   title: 'Path Shape'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: PathShape
  # RectangleShape:
  #   $id: '#RectangleShape'
  #   title: 'Rectangle Shape'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: RectangleShape
  # TextShape:
  #   $id: '#TextShape'
  #   title: 'Text Shape'
  #   description: Something...
  #   type: object
  #   properties:
  #     type:
  #       const: TextShape
  # # -----------------------------------------------------------------------------
  # id:
  #   $id: '#id'
  #   description: A non-empty and non-nullable string that uniquely identifies an object of a given type. Thus, two objects of the same type (e.g. two classes, two relations, two properties) may not have the same id, even if they have different containers.
  #   type: string
  #   minLength: 1
  # name:
  #   title: name
  #   description: Determines a title for the resource. Accepts xsd:string and rdf:langString literals. E.g., "Common Ontology of Value and Risk"@en, "FAIR Model Catalog for Ontology-Driven Conceptual Modeling Research"@en. There must be at most one title per language.
