{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://ontouml.org/ontouml-schema/1.0/",
  "title": "Model",
  "description": "The `ontouml-schema` is an object that represents an OntoUML ontology. Mandatory fields: constant \"@type\": \"Model\", \"id\", \"name\", \"authors\", \"contents\". Additional fields allowed.",
  "type": "object",
  "properties": {
    "@type": { "const": "Model" },
    "id": { "$ref": "#/definitions/id" },
    "name": { "$ref": "#/definitions/name" },
    "authors": { "$ref": "#/definitions/authors" },
    "contents": { "$ref": "#/definitions/contents" }
  },
  "required": [
    "@type",
    "id",
    "name",
    "authors",
    "contents"
  ],

  "definitions": {
    "Package": {
      "description": "An object representing a packge element. Mandatory fields: constant \"@type\": \"Package\", \"id\". Optional fields: \"name\", \"contents\", \"metaProperties\". Additional fields allowed.",
      "type": "object",
      "properties": {
        "@type": { "const": "Package" },
        "id": { "$ref": "#/definitions/id" },
        "name": { "$ref": "#/definitions/name" },
        "contents": { "$ref": "#/definitions/contents" },
        "metaProperties": { "$ref": "#/definitions/metaProperties" }
      },
      "required": [
        "@type",
        "id",
        "name",
        "contents",
        "metaProperties"
      ]
    },

    "Class": {
      "description": "An object representing a class element. Mandatory fields: constant \"@type\": \"Class\", \"id\", \"name\", \"stereotypes\", \"properties\", \"metaProperties\". Additional fields allowed.",
      "type": "object",
      "properties": {
        "@type": { "const": "Class" },
        "id": { "$ref": "#/definitions/id" },
        "name": { "$ref": "#/definitions/name" },
        "stereotypes": { "$ref": "#/definitions/stereotypes" },
        "properties": { "$ref": "#/definitions/properties" },
        "metaProperties": { "$ref": "#/definitions/metaProperties" }
      },
      "required": [
        "@type",
        "id",
        "name",
        "stereotypes",
        "properties",
        "metaProperties"
      ]
    },

    "Association": {
      "description": "An object representing an association element. Mandatory fields: constant \"@type\": \"Class\", \"id\", \"name\", \"stereotypes\", \"properties\", \"metaProperties\". The \"properties\" array must have at least two items and is not nullable. The order of these items represents their position on a equivalent predicate, e.g., in the ternary association \"buys-product-from(buyer,product,seller)\", the order of items representing these entities must follow the order \"buyer\" (in properties[0]), \"product\" (in properties[1]), and \"seller\" (in properties[2]). Additional fields allowed.",
      "type": "object",
      "properties": {
        "@type": { "const": "Association" },
        "id": { "$ref": "#/definitions/id" },
        "name": { "$ref": "#/definitions/name" },
        "stereotypes": { "$ref": "#/definitions/stereotypes" },
        "properties": { 
          "$ref": "#/definitions/properties",
          "minItems": 2
        },
        "metaProperties": { "$ref": "#/definitions/metaProperties" }
      },
      "required": [
        "@type",
        "id",
        "name",
        "stereotypes",
        "properties",
        "metaProperties"
      ],
      "not": { "properties": { "properties": { "type": "null" } } }
    },

    "DeriviationAssociation": {
      "description": "Predicative entities representing bundle of aspects exhibited by tuples that isntantiate it (e.g., 'loves' as in 'John loves Marry' or 'buys-with' as in 'Bob buys a Cellphone with a Credit Card').",
      "type": "object",
      "properties": {
        "@type": { "const": "DeriviationAssociation" },
        "id": { "$ref": "#/definitions/id" },
        "name": { "$ref": "#/definitions/name" },
        "stereotypes": { "$ref": "#/definitions/stereotypes" },
        "properties": { 
          "$ref": "#/definitions/properties",
          "minItems": 2,
          "maxItems": 2
        },
        "metaProperties": { "$ref": "#/definitions/metaProperties" }
      },
      "required": [
        "@type",
        "id",
        "name",
        "stereotypes",
        "properties",
        "metaProperties"
      ],
      "not": { "properties": { "properties": { "type": "null" } } }
    },

    "GeneralizationLink": {
      "description": "A link between two classifiers (either classes or relations) where the instances of the latter (the specific) are necessarily instances of the former (the general).",
      "type": "object",
      "properties": {
        "@type": {
          "const": "GeneralizationLink"
        },
        "name": {
          "$ref": "#/definitions/name"
        },
        "url": {
          "$ref": "#/definitions/url"
        },
        "uri": {
          "$ref": "#/definitions/uri"
        },
        "tuple": {
          "allOf": [
            {
              "$ref": "#/definitions/tuple"
            }
          ],
          "maxItems": 2
        }
      },
      "required": [
        "@type",
        "uri",
        "tuple"
      ],
      "additionalProperties": false
    },
    "GeneralizationSet": {
      "description": "Bundles of generalization links sharing a common general classifier and defined according a common specialization criteria. Generalization sets may be declared as disjoint and/or complete, being assumed as overllaping and incomplete otherwise. A categorizer may be declared in multi-level contexts where the categorizer is instantiated by the specializations of the general classifier present in the set.",
      "type": "object",
      "properties": {
        "@type": {
          "const": "GeneralizationSet"
        },
        "name": {
          "$ref": "#/definitions/name"
        },
        "url": {
          "$ref": "#/definitions/url"
        },
        "uri": {
          "$ref": "#/definitions/uri"
        },
        "isDisjoint": {
          "type": "boolean"
        },
        "isComplete": {
          "type": "boolean"
        },
        "categorizer": {
          "type": "string",
          "format": "uri"
        },
        "tuple": {
          "allOf": [
            {
              "$ref": "#/definitions/tuple"
            }
          ]
        }
      },
      "required": [
        "@type",
        "uri",
        "tuple"
      ],
      "additionalProperties": false
    },
    "Property": {
      "description": "Represents some property of a classifier (either a class of a relation) that captures some valued aspect of instances of the said classifier (e.g., instances of 'Person' holding values for the property 'name'). Values instantiating properties must conform to the property's type and multiplicity.",
      "type": "object",
      "properties": {
        "@type": {
          "const": "Property"
        },
        "name": {
          "$ref": "#/definitions/name"
        },
        "uri": {
          "$ref": "#/definitions/uri"
        },
        "url": {
          "$ref": "#/definitions/url"
        },
        "propertyType": {
          "$ref": "#/definitions/uri"
        },
        "lowerbound": {
          "type": "integer",
          "minimum": 0
        },
        "upperbound": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1
            },
            {
              "const": "*"
            }
          ]
        },
        "constraints": {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "required": [
        "@type",
        "uri"
      ],
      "additionalProperties": false
    },

    "authors": {
      "description": "A non-empty array of strings representing names of an object's authors. Nullable.",
      "oneOf": [
        {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        { "type": "null" }
      ]
    },

    "contents": {
      "description": "A non-empty array of objects representing model elements. May contain objects representing one of the following types of model elements: \"Package\", \"Class\", \"Association\", \"Generalization\", \"GeneralizationSet\". Nullable.",
      "oneOf": [
        {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/Package" },
              { "$ref": "#/definitions/Class" },
              { "$ref": "#/definitions/Association" },
              { "$ref": "#/definitions/Generalization" },
              { "$ref": "#/definitions/GeneralizationSet" }
            ]
          }
        },
        { "type": "null" }
      ]
    },
    
    "id": {
      "description": "A non-empty string representing an object's unique identifier.",
      "type": "string",
      "minLength": 1
    },

    "link": {
      "description": "A non-empty array of IDs representing a relation between two or more objects. A link is equivalent to a predicate evaluated as *true* for the involved entities (e.g., knows(Bob,Jim) representing that Bob indeed knows Jim). The order of elements in the array carry semantics. The minimum array size is 2. Nullable. Ordered.",
      "oneOf": [
        {
          "type": "array",
          "uniqueItems": true,
          "minItems": 2,
          "items": { "$ref": "#/definitions/id" }
        },
        { "type": "null" }
      ]
    },

    "metaProperties": {
      "description": "A non-empty array of key-value pairs representing an object's meta properties. Meta properties may have any name, but its values are restricted to null, booleans, numbers, strings or arrays of these. Meta properties whose values are other objects must be represented through the IDs (i.e., strings) of these objects. A number of pre-defined meta-properties are defined: \"aggregationKind\", \"isAbstract\", \"isDerived\", \"isOrdered\", and \"isReadOnly\". Meta properties are analogous to UML's notion of tagged values. Nullable.",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "oneOf": [
              { 
                "aggregationKind": { 
                  "type": "string",
                  "enum": [ "NONE", "SHARED", "COMPOSITE" ]
                } 
              },
              { "isAbstract": { "type": "boolean" } },
              { "isDerived": { "type": "boolean" } },
              { "isOrdered": { "type": "boolean" } },
              { "isReadOnly": { "type": "boolean" } },
              { "type": "null" },
              {
                "additionalProperties": {
                  "oneOf": [
                    { "type": "null" },
                    { "type": "boolean" },
                    { "type": "number" },
                    { "type": "string" },
                    { 
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "anyOf": [
                          { "type": "boolean" },
                          { "type": "number" },
                          { "type": "string" }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        { "type": "null" }
      ]
    },

    "name": {
      "description": "A non-empty string representing an object's name. Nullable.",
      "oneOf": [
        {
          "type": "string",
          "minLength": 1
        },
        { "type": "null" }
      ]
    },

    "properties": {
      "description": "A non-empty array of Property objects representing properties of instances of the container model element. This captures instances of classes, associations and derivation associations, where in the first case properties are analougous to attrbutes while in the second and third cases are analogous to association ends. Nullable.",
      "oneOf": [
        {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/definitions/Property" }
        },
        { "type": "null" }
      ]
    },

    "stereotypes": {
      "description": "A non-empty array of non-empty strings representing stereotypes of its container object. Nullable.",
      "oneOf": [
        {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        { "type": "null" }
      ]
    }

  }
}
