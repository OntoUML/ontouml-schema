{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://w3id.org/ontouml/schema/v1.0.0",
  "title": "OntoUML Schema",
  "description": "The OntoUML Schema defines the JSON serializations of OntoUML ontologies and their contents according to the OntoUML Metamodel project.",
  "oneOf": [{ "$ref": "#/definitions/OntoumlElement" }],
  "definitions": {
    "OntoumlElement": {
      "$id": "#OntoumlElement",
      "title": "OntoUML Element",
      "description": "An identified element of an OntoUML ontology according to the OntoUML Metamodel, which includes projects, model elements, diagrams, views, and shapes.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "id": { "type": "string" },
            "created": { "type": "string" },
            "modified": { "type": "string" }
          }
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/NamedElement" },
            { "$ref": "#/definitions/Shape" },
            { "$ref": "#/definitions/View" }
          ]
        }
      ]
    },
    "NamedElement": {
      "$id": "#NamedElement",
      "title": "Named Element",
      "description": "An OntoUML element that can be attributed a name and other descriptive information.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "alternativeNames": { "type": "string" },
            "description": { "type": "string" },
            "editorialNotes": { "type": "string" },
            "creators": { "type": "string" },
            "contributors": { "type": "string" }
          }
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/Project" },
            { "$ref": "#/definitions/ModelElement" }
          ]
        }
      ]
    },
    "Project": {
      "$id": "#Project",
      "title": "Project",
      "description": "A named element that serves as the container of an entire OntoUML ontology, including the elements of both the abstract syntax (i.e., model elements) and the concrete syntax (i.e., diagrams, view, and shapes).",
      "type": "object",
      "properties": {
        "type": { "const": "Project" },
        "elements": { "type": "string" },
        "root": { "type": "string" },
        "publisher": { "type": "string" },
        "designedForTasks": { "type": "string" },
        "license": { "type": "string" },
        "accessRights": { "type": "string" },
        "themes": { "type": "string" },
        "contexts": { "type": "string" },
        "ontologyTypes": { "type": "string" },
        "representationStyle": { "type": "string" },
        "namespace": { "type": "string" },
        "landingPages": { "type": "string" },
        "sources": { "type": "string" },
        "bibliographicCitations": { "type": "string" },
        "keywords": { "type": "string" },
        "acronyms": { "type": "string" },
        "languages": { "type": "string" }
      }
    },
    "ModelElement": {
      "$id": "#ModelElement",
      "title": "Model Element",
      "description": "A named element that represents an element of the language's abstract syntax (e.g., a class, a relation, or a generalization).",
      "allOf": [
        {
          "type": "object",
          "properties": { "customProperties": { "type": "string" } }
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/Generalization" },
            { "$ref": "#/definitions/GeneralizationSet" },
            { "$ref": "#/definitions/Link" },
            { "$ref": "#/definitions/Literal" },
            { "$ref": "#/definitions/Note" },
            { "$ref": "#/definitions/Package" },
            { "$ref": "#/definitions/DecoratableElement" }
          ]
        }
      ]
    },
    "Generalization": {
      "$id": "#Generalization",
      "title": "Generalization",
      "description": "A model element that represents the generalization of a specific classifier into a general classifier. When read in the inverse direction, a generalization is referred to as a specialization.\n\nExamples include the generalization of a specific class \"Student\" into a general class \"Person,\" and the generalization of a specific relation \"close friends with\" into a general relation \"friends with\".\n\nA generalization can only connect two classifiers of the same type, i.e., it can either connect two class elements or two relation elements.",
      "type": "object",
      "properties": {
        "type": { "const": "Generalization" },
        "general": { "type": "string" },
        "specific": { "type": "string" }
      }
    },
    "GeneralizationSet": {
      "$id": "#GeneralizationSet",
      "title": "Generalization Set",
      "description": "A model element that represents a group of connected generalization elements. A generalization set can define disjoint and/or complete constraints over the generalizations it groups.\n\nExamples include the incomplete (i.e., non-complete) and overlapping (i.e., non-disjoint) generalization set of \"Person\" into \"Student\" and \"Teacher\", and the disjoint and complete generalization set of \"Person\" into \"Child\" and \"Adult\".\n\nAll generalizations in the generalization set must share a common general classifier.",
      "type": "object",
      "properties": {
        "type": { "const": "GeneralizationSet" },
        "isDisjoint": { "type": "string" },
        "isComplete": { "type": "string" },
        "generalizations": { "type": "string" },
        "categorizer": {
          "description": "TODO: update\n\nA generalization set involving classes can also have a categorizer, which is a class with an order greater than one which all specific classes in the set instantiate. For example, \"Academic Role\" as the categorizer of the generalization set of \"Person\" into \"Student\" and \"Teacher\" representing the specific classes as instances of the categorizer.",
          "type": "string"
        }
      }
    },
    "Link": {
      "$id": "#Link",
      "title": "Link",
      "description": "A model element that connects a note to a model element it concerns.",
      "type": "object",
      "properties": {
        "type": { "const": "Link" },
        "note": { "type": "string" },
        "element": { "type": "string" }
      }
    },
    "Literal": {
      "$id": "#Literal",
      "title": "Literal",
      "description": "A model element that represents a specific value within an enumerated set of values. Examples include each letter in an A to F letter grading scale, listed in a class \\\"Letter Grade\\\" decorated with the stereotype \\\"enumeration\\\".",
      "type": "object",
      "properties": { "type": { "const": "Literal" } }
    },
    "Note": {
      "$id": "#Note",
      "title": "Note",
      "description": "A model element that contains an annotation about the ontology or some of its elements. A note can also be used to represent a constraint in both natural or structured language (i.e., first-order logic, or OCL).",
      "type": "object",
      "properties": {
        "type": { "const": "Note" },
        "text": { "type": "string" }
      }
    },
    "Package": {
      "$id": "#Package",
      "title": "Package",
      "description": "A model element that groups other model elements referred to as \"packageable elements.\" Package elements are used to perform the modularization of an ontology.\n\nWhile the OntoUML Metamodel does not require package elements to follow a tree structure (i.e., it allows overlapping packages), ontologies that require UML representations should adhere to this constraint for compatibility.",
      "type": "object",
      "properties": {
        "type": { "const": "Package" },
        "contents": { "type": "string" }
      }
    },
    "DecoratableElement": {
      "$id": "#DecoratableElement",
      "title": "Decoratable Element",
      "description": "A model element that can be decorated with a stereotype to identify its ontological properties according to UFO.\n\nExamples include a class decorated with the stereotype \"kind\" identifying it as a type of objects that provides an identity principle to its instances.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "stereotype": { "type": "string" },
            "isDerived": { "type": "string" }
          }
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/Property" },
            { "$ref": "#/definitions/Classifier" }
          ]
        }
      ]
    },
    "Property": {
      "$id": "#Property",
      "title": "Property",
      "description": "A decoratable element that represents an attribute of a class, or one end of a relation.\n\nExamples include the attribute \"name\" of the class \"Person\", and the ends of the binary relation \"studies in\" connected to the classes \"Student\" and \"University.\"\n\nInstances of class and relation elements bear values for the properties these classifiers contain, according to the constraints specified within each property. For example, the value assigned to a property in an instance must be itself an instance of the classifier in property type.",
      "type": "object",
      "properties": {
        "type": { "const": "Property" },
        "subsettedProperties": { "type": "string" },
        "redefinedProperties": { "type": "string" },
        "aggregationKind": { "type": "string" },
        "cardinality": { "type": "string" },
        "isOrdered": { "type": "string" },
        "isReadOnly": { "type": "string" },
        "propertyType": { "type": "string" }
      }
    },
    "Classifier": {
      "$id": "#Classifier",
      "title": "Classifier",
      "description": "A decoratable element (either a class or a relation) that defines properties exhibited by its instances.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "isAbstract": { "type": "string" },
            "properties": { "type": "string" }
          }
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/Class" },
            { "$ref": "#/definitions/Relation" }
          ]
        }
      ]
    },
    "Class": {
      "$id": "#Class",
      "title": "Class",
      "description": "A classifier that defines the properties of a set of \"individualized\" entities (i.e., non-relational) of the subject domain.\n\nExamples include \"Person\", \"Enrollment\", and \"Grade\".\n\nThe instances of a class may include entities such as objects (e.g., people, organizations, vehicles), reified properties (e.g., leafs' colors, agents' intentions, enrollments), and bare values (e.g., a number or a literal).",
      "type": "object",
      "properties": {
        "type": { "const": "Class" },
        "literals": { "type": "string" },
        "restrictedTo": { "type": "string" },
        "isPowertype": { "type": "string" },
        "order": { "type": "string" }
      }
    },
    "Relation": {
      "$id": "#Relation",
      "title": "Relation",
      "description": "A classifier that defines the properties of a set of relations of the subject domain.\n\nExamples include \"studies in\", \"buys product from\" (ternary relation), and derivation relations (e.g., between material relations and relators).",
      "type": "object",
      "oneOf": [
        { "$ref": "#/definitions/BinaryRelation" },
        { "$ref": "#/definitions/NaryRelation" }
      ]
    },
    "BinaryRelation": {
      "$id": "#BinaryRelation",
      "title": "Binary Relation",
      "description": "A relation that defines the properties of a set of binary relations of the subject domain.\n\nExamples include \"studies in\", and derivation relations (e.g., between material relations and relators).\n\nA binary relation may either connect two classes, or a relation (as source) and a class (as class) in the case of derivation relations connecting descriptive relations to the classes that serve as their truthmakers (as in the relation between the material relation \"studies in\" and the \"Enrollment\" relator).",
      "type": "object",
      "properties": { "type": { "const": "BinaryRelation" } }
    },
    "NaryRelation": {
      "$id": "#NaryRelation",
      "title": "N-ary Relation",
      "description": "A relation that defines the properties of a set of relations of the subject domain that connect more than two members.\n\nExamples include \"studies in\", \"buys product from\" (ternary relation), and derivation relations (e.g., between material relations and relators).",
      "type": "object",
      "properties": { "type": { "const": "NaryRelation" } }
    },
    "Diagram": {
      "$id": "#Diagram",
      "title": "Diagram",
      "description": "A named element that contains the visual representation (i.e., the concrete syntax) of an OntoUML model or of a portion of it.",
      "type": "object",
      "properties": {
        "type": { "const": "Diagram" },
        "owner": { "type": "string" },
        "views": { "type": "string" }
      }
    },
    "View": {
      "$id": "#View",
      "title": "View",
      "description": "An OntoUML element that represents a single model element in a diagram.\n\nA view element connects a model element to the shapes in a diagram necessary to represent a single occurrence of it. For example, an n-ary relation view connects a single relation element to one diamond and a set of paths that represent a single occurrence of it in a diagram. Multiple views can represent multiple occurrences of an element in the same diagram.\n\nA view element is responsible for what portions of a model element are present in a single diagram representation (e.g., whether the cardinality of a property is shown), unlike a shape, which is responsible aspects of the actual drawing (e.g., how to render a portion of a view, in which position, and with which dimensions).",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "shape": { "type": "string" },
            "isViewOf": { "type": "string" }
          }
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/ClassView" },
            { "$ref": "#/definitions/GeneralizationSetView" },
            { "$ref": "#/definitions/NaryRelationView" },
            { "$ref": "#/definitions/NoteView" },
            { "$ref": "#/definitions/PackageView" },
            { "$ref": "#/definitions/BinaryConnectorView" }
          ]
        }
      ]
    },
    "ClassView": {
      "$id": "#ClassView",
      "title": "Class View",
      "description": "A view element that represents the single occurrence of a class in a diagram.",
      "type": "object",
      "properties": {
        "type": { "const": "ClassView" },
        "rectangle": { "type": "string" }
      }
    },
    "GeneralizationSetView": {
      "$id": "#GeneralizationSetView",
      "title": "Generalization Set View",
      "description": "A view element that represents the single occurrence of a generalization set in a diagram.",
      "type": "object",
      "properties": {
        "type": { "const": "GeneralizationSetView" },
        "generalizations": { "type": "string" },
        "text": { "type": "string" }
      }
    },
    "NaryRelationView": {
      "$id": "#NaryRelationView",
      "title": "N-ary Relation View",
      "description": "A view element that represents the single occurrence of a n-ary relation in a diagram.",
      "type": "object",
      "properties": {
        "type": { "const": "NaryRelationView" },
        "members": { "type": "string" },
        "diamond": { "type": "string" },
        "paths": { "type": "string" }
      }
    },
    "NoteView": {
      "$id": "#NoteView",
      "title": "Note View",
      "description": "A view element that represents the single occurrence of a note in a diagram.",
      "type": "object",
      "properties": {
        "type": { "const": "NoteView" },
        "text": { "type": "string" }
      }
    },
    "PackageView": {
      "$id": "#PackageView",
      "title": "Package View",
      "description": "A view element that represents the single occurrence of a package in a diagram.",
      "type": "object",
      "properties": {
        "type": { "const": "PackageView" },
        "rectangle": { "type": "string" }
      }
    },
    "BinaryConnectorView": {
      "$id": "#BinaryConnectorView",
      "title": "Binary Connector View",
      "description": "A view element that represents the single occurrence of a binary connector (e.g., a binary relation, or a generalization) in a diagram.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "sourceView": { "type": "string" },
            "targetView": { "type": "string" },
            "path": { "type": "string" }
          }
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/GeneralizationView" },
            { "$ref": "#/definitions/LinkView" },
            { "$ref": "#/definitions/RelationView" }
          ]
        }
      ]
    },
    "GeneralizationView": {
      "$id": "#GeneralizationView",
      "title": "Generalization View",
      "description": "A view element that represents the single occurrence of a binary relation in a diagram.",
      "type": "object",
      "properties": { "type": { "const": "GeneralizationView" } }
    },
    "LinkView": {
      "$id": "#LinkView",
      "title": "Link View",
      "description": "A view element that represents the single occurrence of a link in a diagram.",
      "type": "object",
      "properties": { "type": { "const": "LinkView" } }
    },
    "RelationView": {
      "$id": "#RelationView",
      "title": "Relation View",
      "description": "A view element that represents the single occurrence of a binary relation in a diagram.",
      "type": "object",
      "properties": { "type": { "const": "RelationView" } }
    },
    "Shape": {
      "$id": "#Shape",
      "title": "Shape",
      "description": "An OntoUML element that identifies how to render a view (or a portion of one) in a diagram.",
      "oneOf": [
        { "$ref": "#/definitions/Path" },
        { "$ref": "#/definitions/RectangularShape" }
      ]
    },
    "Path": {
      "$id": "#Path",
      "title": "Path",
      "description": "A shape defined by a list of points connecting two other shapes.",
      "type": "object",
      "properties": {
        "type": { "const": "Path" },
        "points": { "type": "string" }
      }
    },
    "RectangularShape": {
      "$id": "#RectangularShape",
      "title": "Rectangular Shape",
      "description": "A shape defined by a top left position, a height, a width.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "topLeft": { "type": "string" },
            "width": { "type": "string" },
            "height": { "type": "string" }
          }
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/Diamond" },
            { "$ref": "#/definitions/Rectangle" },
            { "$ref": "#/definitions/Text" }
          ]
        }
      ]
    },
    "Diamond": {
      "$id": "#Diamond",
      "title": "Diamond",
      "description": "A rectangular shape that renders the joining diamond of a n-ary relation view.",
      "type": "object",
      "properties": { "type": { "const": "Diamond" } }
    },
    "Rectangle": {
      "$id": "#Rectangle",
      "title": "Rectangle",
      "description": "A rectangular shape that renders the shape of a class view or a package view.",
      "type": "object",
      "properties": { "type": { "const": "Rectangle" } }
    },
    "Text": {
      "$id": "#Text",
      "title": "Text",
      "description": "A rectangular shape that renders the shape of a generalization set view or a note view.",
      "type": "object",
      "properties": { "type": { "const": "Text" } }
    }
  }
}
